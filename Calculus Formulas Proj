import java.util.ArrayList;
import java.util.ListIterator;
import java.util.Scanner;

public class Driver {
	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);

		System.out.println("Before we begin, here are some friendly reminders: ");
		ArrayList<String> Reminders = new ArrayList<String>();

		Reminders.add("Don't forget the U' when doing the chain rule!");
		Reminders.add("Don't forget the + C when integrating!");

		ListIterator iterator = Reminders.listIterator();

		while (iterator.hasNext())
			System.out.println(iterator.next());

		System.out.println();

		System.out.println("Now, what type of formulas do you need?");
		String myString = scan.nextLine();

		String[] Formulas = new String[4];
		String[] InvTrig = new String[6];
		String[] Trig = new String[6];
		String[] ExpDerivatives = new String[4];
		String[] RiemannSums = new String[2];
		String[] AntiDerivatives = new String[18];
		String[] CoFunction = new String[15];
		String[] NegAngles = new String[6];
		String[] AddSub = new String[6];
		String[] DoubleAngle = new String[3];
		String[] Product = new String[4];
		String[] Pythagorean = new String[3];
		String[] HalfAngle = new String[3];
		String[] Sum = new String[4];

		Trig TrigObject = new Trig();
		TrigObject.Identites(myString, CoFunction, NegAngles, AddSub, DoubleAngle, Product, Pythagorean, HalfAngle,
				Sum);

		Derivative DerivativeObject = new Derivative();
		DerivativeObject.Derivatives(myString, InvTrig, Trig, Formulas, ExpDerivatives);

		Integral IntegralObject = new Integral();
		IntegralObject.Integrals(myString, RiemannSums, AntiDerivatives);

	}

}

public class Trig {

	public void Identites(String myString, String[] CoFunction, String[] NegAngles, String[] AddSub,
			String[] DoubleAngle, String[] Product, String[] Pythagorean, String[] HalfAngle, String[] Sum) {

		DoubleAngle[0] = "Sin(2x) = 2sinxcosx";
		DoubleAngle[1] = "Cos(2x) = cos^2x-sin^2x, 2cos^2x - 1, or 1-2sin^2x";
		DoubleAngle[2] = "Tan(2x) = (2tanx) / (1-tan^2(x)))";

		HalfAngle[0] = "Sin(x/2) = sqrt((1-cosx) / (2))";
		HalfAngle[1] = "Cos(x/2) = sqrt((1+cosx) / (2))";
		HalfAngle[2] = "Tan(x/2) = sqrt((1-cosx) / (1+cosx))";

		Pythagorean[0] = "1 + tan^2(x) = Sec^2(x)";
		Pythagorean[1] = "1 + cot^2(x) = csc^2(x)";
		Pythagorean[2] = "Sin^2(x) + Cos^2(x) = 1";

		Product[0] = "Sin(A)Cos(B) = .5(Sin(A+B) + Sin(A-B)";
		Product[1] = "Cos(A)Sin(B) = .5(Sin(A+B) - Sin(A-B)";
		Product[2] = "Cos(A)Cos(B) = .5(Cos(A+B) + Cos(A-B)";
		Product[3] = "Sin(A)Sin(B) = .5(Cos(A-B) - Cos(A+B)";

		CoFunction[0] = "Sin(x) = Cos(pi/2 - x";
		CoFunction[1] = "Sec(x) = Csc{pi/2 - x)";
		CoFunction[2] = "Tan(x) = Cot(pi/2 - x)";
		CoFunction[3] = "Sin(pi-x) = Sin(x)";
		CoFunction[4] = "Cos(pi-x) = -Cos(x)";
		CoFunction[5] = "Tan(pi-x) = -Tan(x)";
		CoFunction[6] = "Csc(pi-x) = Csc(x)";
		CoFunction[7] = "Sec(pi-x) = -Sec(x)";
		CoFunction[8] = "Cot(pi-x) = Cot(x)";
		CoFunction[9] = "Sin(pi+x) = -Sin(x)";
		CoFunction[10] = "Cos(pi+x) = -Cos(x)";
		CoFunction[11] = "Tan(pi+x) = Tan(x)";
		CoFunction[12] = "Csc(pi+x) = -Csc(x)";
		CoFunction[13] = "Sec(pi+x) = -Sec(x)";
		CoFunction[14] = "Cot(pi+x) = Cot(x)";

		NegAngles[0] = "Sin(-x) = -Sin(x)";
		NegAngles[1] = "Cos(-x) = Cos(x)";
		NegAngles[2] = "Tan(-x) = -Tan(x)";
		NegAngles[3] = "Csc(-x) = -Csc(x)";
		NegAngles[4] = "Sec(-x) = Sec(x)";
		NegAngles[5] = "Cot(-x) = -Cot(x)";

		AddSub[0] = "Sin(A+B) = Sin(A)Cos(B) + Cos(A)Sin(B)";
		AddSub[1] = "Cos(A+B) = Cos(A)Cos(B) - Sin(A)Sin(B)";
		AddSub[2] = "Tan(A+B) = (TanA+TanB) / (1-TanA*TanB)";
		AddSub[3] = "Sin(A-B) = Sin(A)Cos(B) - Cos(A)Sin(B)";
		AddSub[4] = "Cos(A-B) = Cos(A)Cos(B) + Sin(A)Sin(B)";
		AddSub[5] = "Tan(A-B) = (TanA - TanB) / (1+TanA*TanB)";

		Sum[0] = "Sin(A) + Sin(B) = 2Sin((A+B)/(2)) * Cos((A-B) / (2))";
		Sum[1] = "Sin(A) - Sin(B) = 2Cos((A+B)/(2)) * Sin((A-B) / (2))";
		Sum[2] = "Cos(A) + Cos(B) = 2Cos((A+B)/(2)) * Cos((A-B) / (2))";
		Sum[3] = "Cos(A) - Cos(B) = -2sin((A+B)/(2)) * Sin((A-B) / (2))";

		if (myString.equalsIgnoreCase("Trig Cofunction Identities")) {
			for (int i = 0; i < CoFunction.length; i++)
				System.out.println(CoFunction[i]);
		}

		if (myString.equalsIgnoreCase("Trig angle identities")) {
			for (int i = 0; i < HalfAngle.length; i++) {
				System.out.println(HalfAngle[i]);
				System.out.println(DoubleAngle[i]);
			}
		}

		if (myString.equalsIgnoreCase("Sum Identities")) {
			for (int i = 0; i < Sum.length; i++)
				System.out.println(Sum[i]);
		}

		if (myString.equalsIgnoreCase("Add and Subtract Identities")) {
			for (int i = 0; i < AddSub.length; i++)
				System.out.println(AddSub[i]);
		}
		if (myString.equalsIgnoreCase("Negative Angle Identities")) {
			for (int i = 0; i < NegAngles.length; i++)
				System.out.println(NegAngles[i]);
		}

		if (myString.equalsIgnoreCase("Pythagorean Identities")) {
			for (int i = 0; i < Pythagorean.length; i++)
				System.out.println(Pythagorean[i]);
		}

		else if (myString.equalsIgnoreCase("Product identities")) {
			for (int i = 0; i < Product.length; i++)
				System.out.println(Product[i]);
		}

	}

}


public class Derivative {

	public void Derivatives(String myString, String[] InvTrig, String[] Trig, String[] Formulas,
			String[] ExpDerivatives) {

		Formulas[0] = "Product Rule: 1d2 + 2d1";
		Formulas[1] = "Quotient Rule: Lo*dHi - Hi*dLo / (Lo)^2";
		Formulas[2] = "Chain Rule: F'(U) * U'";
		Formulas[3] = "Power Rule: If y = x^n, y' = nx^n-1";

		InvTrig[0] = "ArcSin(x) = (1)(x') / (sqrt(1-x^2)";
		InvTrig[1] = "ArcCos(x) = - (1)(x') / (sqrt(1-x^2";
		InvTrig[2] = "ArcTan(x) = (1)(x') / (1+x^2)";
		InvTrig[3] = "ArcSec(x) = (1)(x') / (|x| * sqrt(x^2-1)";
		InvTrig[4] = "ArcCsc(x) = (-)(1)(x') / (|x| * sqrt(x^2-1)";
		InvTrig[5] = "ArcCot(x) = (-)(1)(x') / (1+x^2)";

		Trig[0] = "Sin (x) = Cos(x) * x'";
		Trig[1] = "Cos(x) = -Sin(x) * x'";
		Trig[2] = "Tan(x) = Sec^2(x) * x'";
		Trig[3] = "Csc(x) = -Csc(x)Cot(x) * x'";
		Trig[4] = "Sec(x) = Sec(x)Tan(x) * x'";
		Trig[5] = "Cot(x) = -Csc^2(x) * x'";

		ExpDerivatives[0] = "a^x = a^x * ln(a) * x'";
		ExpDerivatives[1] = "logbx = (1)(x') / (x)(ln(b))";
		ExpDerivatives[2] = "ln(x) = (1)(x') / (x)";
		ExpDerivatives[3] = "e^x = e^x * x'";

		if (myString.equalsIgnoreCase("Main Formulas")) {
			for (int i = 0; i < Formulas.length; i++) {
				System.out.println(Formulas[i]);
			}
		}

		if (myString.equalsIgnoreCase("Inverse Trig")) {
			for (int i = 0; i < InvTrig.length; i++) {
				System.out.println(InvTrig[i]);
			}
		}

		if (myString.equalsIgnoreCase("Trig Derivatives")) {
			for (int i = 0; i < Trig.length; i++)
				System.out.println(Trig[i]);
		}

		if (myString.equalsIgnoreCase("Exponential Derivatives")) {
			for (int i = 0; i < ExpDerivatives.length; i++)
				System.out.println(ExpDerivatives[i]);
		}

	}

}


public class Integral {

	public void Integrals(String myString, String[] riemannSums, String[] antiDerivatives) {
		// TODO Auto-generated method stub

		riemannSums[0] = "\"Sigma (Delta x * f(xi))\\r\\n\" + \r\n" + "				\"i=0\\r\\n\" + \r\n"
				+ "				\"\");\r\n" + "";
		riemannSums[1] = "\"Sigma (Delta x * f(xi))\\r\\n\" + \r\n" + "				\"i=1\\r\\n\" + \r\n"
				+ "				\"\");\r\n" + "";
		
		// Need to edit formatting for Riemann sums.
		
		antiDerivatives[0] = "∫(0)dx = C";
		antiDerivatives[1] = "∫(1)dx = x + C";
		antiDerivatives[2] = "∫(x^n)dx = [(x^n+1) / (n+1)] +C";
		antiDerivatives[3] = "∫(e^x)dx = e^x + C";
		antiDerivatives[4] = "∫(1/x)dx = ln(x) + C";
		antiDerivatives[5] = "∫(n^x) = [(n^x) / (ln(n))] +C";
		antiDerivatives[6] = "∫(cosx)dx = sin(x) + C";
		antiDerivatives[7] = "∫(sinx)dx = -cos(x) + C";
		antiDerivatives[8] = "∫(sec^2(x))dx = tan(x) + C";
		antiDerivatives[9] = "∫csc^2(x)dx = -cot(x) + C";
		antiDerivatives[10] = "∫(tan(x)sec(x))dx = sec(x) + C";
		antiDerivatives[11] = "∫(cot(x)csc(x))dx = -csc(x) + C";
		antiDerivatives[12] = "∫[(1) / (sqrt(1-x2))]dx = ArcSin(x) + C";
		antiDerivatives[13] = "∫[(-1) / (sqrt(1-x2))]dx = ArcCos(x) + C";
		antiDerivatives[14] = "∫[(1) / (1+x^2)]dx = ArcTan(x) + C";
		antiDerivatives[15] = "∫[(-1) / (1+x^2)]dx = ArcCot(x) + C";
		antiDerivatives[16] = "∫[(1) / (x)(sqrt(x^2-1))]dx = ArcSec(x) + C";
		antiDerivatives[17] = "∫[(-1) / (x)(sqrt(x^2-1))]dx = ArcCsc(x) + C";

		if (myString.equalsIgnoreCase("Riemann Sums")) {
			for (int i = 0; i < riemannSums.length; i++)
				System.out.println(riemannSums[i]);
		}

		else if (myString.equalsIgnoreCase("Anti Derivatives")) {
			for (int i = 0; i < antiDerivatives.length; i++)
				System.out.println(antiDerivatives[i]);
		}

	}

}

